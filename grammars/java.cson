'scopeName': 'source.java'
'name': 'Java'
'fileTypes': [
  'java'
  'bsh'
]
'patterns': [
  {
    'begin': '\\b(package)\\b\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.other.package.java'
    'end': '\\s*(;)'
    'endCaptures':
      '1':
        'name': 'punctuation.terminator.java'
    'name': 'meta.package.java'
    'contentName': 'storage.modifier.package.java'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'match': '(?<=\\.)\\s*\\.|\\.(?=\\s*;)'
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        'match': '(?<!_)_(?=\\s*(\\.|;))|[A-Z]+|\\b\\d+|-+'
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        # http://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html
        'match': '''(?x)\\b(?<!\\$)
                    (abstract|assert|boolean|break|byte|case|catch|char|class|
                    const|continue|default|do|double|else|enum|extends|final|
                    finally|float|for|goto|if|implements|import|instanceof|int|
                    interface|long|native|new|package|private|protected|public|
                    return|short|static|strictfp|super|switch|syncronized|this|
                    throw|throws|transient|try|void|volatile|while|
                    true|false|null)\\b
                  '''
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        'match': '\\.'
        'name': 'punctuation.separator.java'
      }
    ]
  }
  {
    'begin': '\\b(import)\\b\\s*\\b(static)?\\b\\s'
    'beginCaptures':
      '1':
        'name': 'keyword.other.import.java'
      '2':
        'name': 'storage.modifier.java'
    'end': '\\s*(;)'
    'endCaptures':
      '1':
        'name': 'punctuation.terminator.java'
    'name': 'meta.import.java'
    'contentName': 'storage.modifier.import.java'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'match': '(?<=\\.)\\s*\\.|\\.(?=\\s*;)'
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        'match': '(?<!\\.)\\s*\\*'
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        'match': '(?<!_)_(?=\\s*(\\.|;))|\\b\\d+|-+'
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        # http://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html
        'match': '''(?x)\\b(?<!\\$)
                    (abstract|assert|boolean|break|byte|case|catch|char|class|
                    const|continue|default|do|double|else|enum|extends|final|
                    finally|float|for|goto|if|implements|import|instanceof|int|
                    interface|long|native|new|package|private|protected|public|
                    return|short|static|strictfp|super|switch|syncronized|this|
                    throw|throws|transient|try|void|volatile|while|
                    true|false|null)\\b
                  '''
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        'match': '\\.'
        'name': 'punctuation.separator.java'
      }
      {
        'match': '\\*'
        'name': 'variable.language.wildcard.java'
      }
    ]
  }
  {
    'include': '#code'
  }
]
'repository':
  'all-types':
    'patterns': [
      {
        'include': '#primitive-arrays'
      }
      {
        'include': '#primitive-types'
      }
      {
        'include': '#object-types'
      }
    ]
  'annotations':
    'patterns': [
      {
        'begin': '(@[^ (]+)(\\()'
        'beginCaptures':
          '1':
            'name': 'storage.type.annotation.java'
          '2':
            'name': 'punctuation.definition.annotation-arguments.begin.bracket.round.java'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.annotation-arguments.end.bracket.round.java'
        'name': 'meta.declaration.annotation.java'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'constant.other.key.java'
              '2':
                'name': 'keyword.operator.assignment.java'
            'match': '(\\w*)\\s*(=)'
          }
          {
            'include': '#code'
          }
          {
            'match': ','
            'name': 'punctuation.separator.delimiter.java'
          }
        ]
      }
      {
        'match': '@\\w*'
        'name': 'storage.type.annotation.java'
      }
    ]
  'anonymous-classes-and-new':
    'begin': '\\bnew\\b'
    'beginCaptures':
      '0':
        'name': 'keyword.control.new.java'
    'end': '(?<=\\)|\\])(?!\\s*{)|(?<=})|(?=;)'
    'patterns': [
      {
        'begin': '(\\w+)\\s*(?=\\[)'
        'beginCaptures':
          '1':
            'name': 'storage.type.java'
        'end': '(})|(?=\\s*(?:,|;|\\)))'
        'endCaptures':
          '1':
            'name': 'punctuation.section.block.end.bracket.curly.java'
        'patterns': [
          {
            'begin': '\\['
            'beginCaptures':
              '0':
                'name': 'punctuation.bracket.square.java'
            'end': '\\]'
            'endCaptures':
              '0':
                'name': 'punctuation.bracket.square.java'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
          {
            'begin': '{'
            'beginCaptures':
              '0':
                'name': 'punctuation.section.block.begin.bracket.curly.java'
            'end': '(?=})'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
        ]
      }
      {
        'begin': '(?=\\w.*\\()'
        'end': '(?<=\\))'
        'patterns': [
          {
            'include': '#object-types'
          }
          {
            'begin': '\\('
            'beginCaptures':
              '0':
                'name': 'punctuation.bracket.round.java'
            'end': '\\)'
            'endCaptures':
              '0':
                'name': 'punctuation.bracket.round.java'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
        ]
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.inner-class.begin.bracket.curly.java'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.section.inner-class.end.bracket.curly.java'
        'name': 'meta.inner-class.java'
        'patterns': [
          {
            'include': '#class-body'
          }
        ]
      }
    ]
  'assertions':
    'patterns': [
      {
        'begin': '\\b(assert)\\s'
        'beginCaptures':
          '1':
            'name': 'keyword.control.assert.java'
        'end': '$'
        'name': 'meta.declaration.assertion.java'
        'patterns': [
          {
            'match': ':'
            'name': 'keyword.operator.assert.expression-separator.java'
          }
          {
            'include': '#code'
          }
        ]
      }
    ]
  'class':
    'begin': '(?=\\w?[\\w\\s]*(?:class|(?:@)?interface|enum)\\s+\\w+)'
    'end': '}'
    'endCaptures':
      '0':
        'name': 'punctuation.section.class.end.bracket.curly.java'
    'name': 'meta.class.java'
    'patterns': [
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#generics'
      }
      {
        'include': '#comments'
      }
      {
        'captures':
          '1':
            'name': 'storage.modifier.java'
          '2':
            'name': 'entity.name.type.class.java'
        'match': '(class|(?:@)?interface|enum)\\s+(\\w+)'
        'name': 'meta.class.identifier.java'
      }
      {
        'begin': 'extends'
        'beginCaptures':
          '0':
            'name': 'storage.modifier.extends.java'
        'end': '(?={|implements)'
        'name': 'meta.definition.class.inherited.classes.java'
        'patterns': [
          {
            'include': '#object-types-inherited'
          }
          {
            'include': '#comments'
          }
        ]
      }
      {
        'begin': '(implements)\\s'
        'beginCaptures':
          '1':
            'name': 'storage.modifier.implements.java'
        'end': '(?=\\s*extends|\\{)'
        'name': 'meta.definition.class.implemented.interfaces.java'
        'patterns': [
          {
            'include': '#object-types-inherited'
          }
          {
            'include': '#comments'
          }
        ]
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.class.begin.bracket.curly.java'
        'end': '(?=})'
        'contentName': 'meta.class.body.java'
        'patterns': [
          {
            'include': '#class-body'
          }
        ]
      }
    ]
  'class-body':
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'include': '#class'
      }
      {
        'include': '#enums'
      }
      {
        'include': '#variables'
      }
      {
        'include': '#generics'
      }
      {
        'include': '#methods'
      }
      {
        'include': '#annotations'
      }
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#code'
      }
    ]
  'code':
    'patterns': [
      {
        'include': '#annotations'
      }
      {
        'include': '#comments'
      }
      {
        'include': '#enums'
      }
      {
        'include': '#class'
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.block.begin.bracket.curly.java'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.section.block.end.bracket.curly.java'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
      {
        'include': '#assertions'
      }
      {
        'include': '#parens'
      }
      {
        'include': '#constants-and-special-vars'
      }
      {
        'include': '#anonymous-classes-and-new'
      }
      {
        'include': '#lambda-expression'
      }
      {
        'include': '#keywords'
      }
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#method-call'
      }
      {
        'include': '#strings'
      }
      {
        'include': '#all-types'
      }
      {
        'match': ','
        'name': 'punctuation.separator.delimiter.java'
      }
      {
        'match': '\\.'
        'name': 'punctuation.separator.period.java'
      }
      {
        'match': ';'
        'name': 'punctuation.terminator.java'
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '0':
            'name': 'punctuation.definition.comment.java'
        'match': '/\\*\\*/'
        'name': 'comment.block.empty.java'
      }
      {
        'include': 'text.html.javadoc'
      }
      {
        'include': '#comments-inline'
      }
    ]
  'comments-inline':
    'patterns': [
      {
        'begin': '/\\*'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.java'
        'end': '\\*/'
        'name': 'comment.block.java'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.java'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.java'
            'end': '\\n'
            'name': 'comment.line.double-slash.java'
          }
        ]
      }
    ]
  'constants-and-special-vars':
    'patterns': [
      {
        'match': '\\b(true|false|null)\\b'
        'name': 'constant.language.java'
      }
      {
        'match': '\\bthis\\b'
        'name': 'variable.language.this.java'
      }
      {
        'match': '\\bsuper\\b'
        'name': 'variable.language.java'
      }
      {
        'match': '\\b((0(b|B)[01]+)|(0(x|X)[0-9a-fA-F]+)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\\b'
        'name': 'constant.numeric.java'
      }
      {
        'match': '(\\.)?\\s*\\b([A-Z][A-Z0-9_]+)(?!<|\\.\\s*class|\\s*\\w+\\s*=)\\b'
        'name': 'constant.other.java'
        'captures':
          '1':
            'name': 'punctuation.separator.period.java'
      }
    ]
  'generics':
    'begin': '<'
    'beginCaptures':
      '0':
        'name': 'punctuation.bracket.angle.java'
    'end': '>'
    'endCaptures':
      '0':
        'name': 'punctuation.bracket.angle.java'
    'patterns': [
      {
        'match': '\\b(extends|super)\\b'
        'name': 'storage.modifier.$1.java'
      }
      {
        'match': '([a-zA-Z$_][a-zA-Z0-9$_]*)(?=\\s*<)'
        'captures':
          '1':
            'name': 'storage.type.java'
      }
      {
        'match': '[a-zA-Z$_][a-zA-Z0-9$_]*'
        'name': 'storage.type.generic.java'
      }
      {
        'match': '\\?'
        'name': 'storage.type.generic.wildcard.java'
      }
      {
        'match': '&'
        'name': 'punctuation.separator.types.java'
      }
      {
        'match': ','
        'name': 'punctuation.separator.delimiter.java'
      }
      {
        'include': '#parens'
      }
      {
        'include': '#generics'
      }
      {
        'include': '#comments'
      }
    ]
  'enums':
    'begin': '^\\s*(enum)\\s+(\\w+)'
    'beginCaptures':
      '1':
        'name': 'storage.modifier.java'
      '2':
        'name': 'entity.name.type.enum.java'
    'end': '}'
    'endCaptures':
      '0':
        'name': 'punctuation.section.enum.end.bracket.curly.java'
    'name': 'meta.enum.java'
    'patterns': [
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.enum.begin.bracket.curly.java'
        'end': '(?=})'
        'patterns': [
          {
            'match': '\\w+'
            'name': 'constant.other.enum.java'
          }
          {
            'include': '#class-body'
          }
        ]
      }
      {
        'include': '#comments'
      }
    ]
  'keywords':
    'patterns': [
      {
        'match': '\\b(try|catch|finally|throw)\\b'
        'name': 'keyword.control.catch-exception.java'
      }
      {
        'match': '\\?|:'
        'name': 'keyword.control.ternary.java'
      }
      {
        'match': '\\b(return|break|case|continue|default|do|while|for|switch|if|else)\\b'
        'name': 'keyword.control.java'
      }
      {
        'match': '\\b(instanceof)\\b'
        'name': 'keyword.operator.instanceof.java'
      }
      {
        'match': '(<<|>>>?|~|\\^)'
        'name': 'keyword.operator.bitwise.java'
      }
      {
        'match': '((&|\\^|\\||<<|>>>?)=)'
        'name': 'keyword.operator.assignment.bitwise.java'
      }
      {
        'match': '(===?|!=|<=|>=|<>|<|>)'
        'name': 'keyword.operator.comparison.java'
      }
      {
        'match': '([+*/%-]=)'
        'name': 'keyword.operator.assignment.arithmetic.java'
      }
      {
        'match': '(=)'
        'name': 'keyword.operator.assignment.java'
      }
      {
        'match': '(\\-\\-|\\+\\+)'
        'name': 'keyword.operator.increment-decrement.java'
      }
      {
        'match': '(\\-|\\+|\\*|\\/|%)'
        'name': 'keyword.operator.arithmetic.java'
      }
      {
        'match': '(!|&&|\\|\\|)'
        'name': 'keyword.operator.logical.java'
      }
      {
        'match': '(\\||&)'
        'name': 'keyword.operator.bitwise.java'
      }
    ]
  'lambda-expression':
    'patterns': [
      {
        'match': '->'
        'name': 'storage.type.function.arrow.java'
      }
    ]
  'method-call':
    'begin': '([\\w$]+)(\\()'
    'beginCaptures':
      '1':
        'name': 'meta.method.java'
      '2':
        'name': 'punctuation.definition.method-parameters.begin.bracket.round.java'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.method-parameters.end.bracket.round.java'
    'name': 'meta.method-call.java'
    'patterns': [
      {
        'match': ','
        'name': 'punctuation.separator.delimiter.java'
      }
      {
        'include': '#code'
      }
    ]
  'methods':
    'begin': '(?!new)(?=[\\w<].*\\s+)(?=([^=/]|/(?!/))+\\()'
    'end': '(})|(?=;)'
    'endCaptures':
      '1':
        'name': 'punctuation.section.method.end.bracket.curly.java'
    'name': 'meta.method.java'
    'patterns': [
      {
        'include': '#storage-modifiers'
      }
      {
        'begin': '(\\w+)\\s*(\\()'
        'beginCaptures':
          '1':
            'name': 'entity.name.function.java'
          '2':
            'name': 'punctuation.definition.parameters.begin.bracket.round.java'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.parameters.end.bracket.round.java'
        'name': 'meta.method.identifier.java'
        'patterns': [
          {
            'include': '#parameters'
          }
        ]
      }
      {
        'include': '#generics'
      }
      {
        'begin': '(?=\\w.*\\s+\\w+\\s*\\()'
        'end': '(?=\\w+\\s*\\()'
        'name': 'meta.method.return-type.java'
        'patterns': [
          {
            'include': '#all-types'
          }
        ]
      }
      {
        'include': '#throws'
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.method.begin.bracket.curly.java'
        'end': '(?=})'
        'contentName': 'meta.method.body.java'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
      {
        'include': '#comments'
      }
    ]
  'object-types':
    'patterns': [
      {
        'include': '#generics'
      }
      {
        'begin': '\\b(?:[a-z]\\w*\\s*(\\.)\\s*)*[A-Z]+\\w*\\b\\s*(?=\\[)'
        'beginCaptures':
          '1':
            'name': 'punctuation.separator.period.java'
        'end': '(?!\\s*\\[)'
        'name': 'storage.type.object.array.java'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'include': '#parens'
          }
        ]
      }
      {
        # Match possible generics first, eg Wow<String> instead of just Wow
        'begin': '\\b(?:[a-z]\\w*\\s*(\\.)\\s*)*[A-Z]+\\w*\\b\\s*(?=<)'
        'beginCaptures':
          '0':
            'name': 'storage.type.java'
          '1':
            'name': 'punctuation.separator.period.java'
        'end': '(?<=>)'
        'patterns': [
          {
            'include': '#generics'
          }
        ]
      }
      {
        # If the above fails *then* just look for Wow
        'match': '\\b(?:[a-z]\\w*\\s*(\\.)\\s*)*[A-Z]+\\w*\\b'
        'captures':
          '1':
            'name': 'punctuation.separator.period.java'
        'name': 'storage.type.java'
      }
    ]
  'object-types-inherited':
    'patterns': [
      {
        'include': '#generics'
      }
      {
        'match': '\\b(?:[a-z]\\w*\\s*(\\.)\\s*)*[A-Z]+\\w*'
        'name': 'entity.other.inherited-class.java'
        'captures':
          '1':
            'name': 'punctuation.separator.period.java'
      }
      {
        'match': ','
        'name': 'punctuation.separator.delimiter.java'
      }
    ]
  'parameters':
    'patterns': [
      {
        'match': 'final'
        'name': 'storage.modifier.java'
      }
      {
        'include': '#annotations'
      }
      {
        'include': '#all-types'
      }
      {
        'match': '\\w+'
        'name': 'variable.parameter.java'
      }
      {
        'match': ','
        'name': 'punctuation.separator.delimiter.java'
      }
    ]
  'parens':
    'patterns': [
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.bracket.round.java'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.bracket.round.java'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
      {
        'begin': '\\['
        'beginCaptures':
          '0':
            'name': 'punctuation.bracket.square.java'
        'end': '\\]'
        'endCaptures':
          '0':
            'name': 'punctuation.bracket.square.java'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.bracket.curly.java'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.bracket.curly.java'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
    ]
  'primitive-arrays':
    'patterns': [
      {
        'begin': '\\b(void|boolean|byte|char|short|int|float|long|double)\\s*(?=\\[)'
        'end': '(?!\\s*\\[)'
        'name': 'storage.type.primitive.array.java'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'include': '#parens'
          }
        ]
      }
    ]
  'primitive-types':
    'patterns': [
      {
        'match': '\\b(?:void|boolean|byte|char|short|int|float|long|double)\\b'
        'name': 'storage.type.primitive.java'
      }
    ]
  'storage-modifiers':
    'captures':
      '1':
        'name': 'storage.modifier.java'
    'match': '\\b(public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient|volatile)\\b'
  'strings':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.java'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.java'
        'name': 'string.quoted.double.java'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.java'
          }
        ]
      }
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.java'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.java'
        'name': 'string.quoted.single.java'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.java'
          }
        ]
      }
    ]
  'throws':
    'begin': 'throws'
    'beginCaptures':
      '0':
        'name': 'storage.modifier.java'
    'end': '(?={|;)'
    'name': 'meta.throwables.java'
    'patterns': [
      {
        'include': '#object-types'
      }
    ]
  'variables':
    'applyEndPatternLast': 1
    'patterns': [
      {
        'begin': '''
          (?x:(?=
            (?:
              (?:private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final) # visibility/modifier
              |
              (?:def)
              |
              (?:void|boolean|byte|char|short|int|float|long|double)
              |
              (?:(?:[a-z]\\w*\\s*\\.\\s*)*[A-Z]+\\w*) # object type
            )
            \\s+
            (?!private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final|def|void|boolean|byte|char|short|int|float|long|double)
            [\\w\\d_<>\\[\\],\\?][\\w\\d_<>\\[\\],\\?\\s]*
            \\s*=?
          ))
        '''
        'end': '(?=;)'
        'name': 'meta.definition.variable.java'
        'patterns': [
          {
            'match': '\\s'
          }
          {
            'captures':
              '1':
                'name': 'constant.variable.java'
            'match': '([A-Z_0-9]+)\\s+(?=\\=)'
          }
          {
            'captures':
              '1':
                'name': 'meta.definition.variable.name.java'
            'match': '(\\w[^\\s,]*)\\s+(?=\\=)'
          }
          {
            'begin': '='
            'beginCaptures':
              '0':
                'name': 'keyword.operator.assignment.java'
            'end': '(?=;)'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
          {
            'captures':
              '1':
                'name': 'meta.definition.variable.name.java'
            'match': '(\\w[^\\s=]*)(?=\\s*;)'
          }
          {
            'include': '#code'
          }
        ]
      }
    ]
